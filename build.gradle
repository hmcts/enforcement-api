plugins {
  id 'application'
  id 'jacoco'
  id 'io.spring.dependency-management' version '1.1.7'
  id 'org.springframework.boot' version '3.4.4'
  id 'com.github.ben-manes.versions' version '0.52.0'
  id 'org.sonarqube' version '6.1.0.5360'
  id 'net.serenity-bdd.serenity-gradle-plugin' version '4.2.16'
  /*
    Applies analysis tools including checkstyle and OWASP Dependency checker.
    See https://github.com/hmcts/gradle-java-plugin
 */
  id 'uk.gov.hmcts.java' version '0.12.65'
}

group = 'uk.gov.hmcts.reform'
version = '0.0.1'

java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(21)
  }
}

sourceSets {
  functionalTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/functionalTest/java')
    }
    resources.srcDir file('src/functionalTest/resources')
  }

  integrationTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/integrationTest/java')
    }
    resources.srcDir file('src/integrationTest/resources')
  }

  smokeTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/smokeTest/java')
    }
    resources.srcDir file('src/smokeTest/resources')
  }
}

configurations {
  functionalTestImplementation.extendsFrom testImplementation
  functionalTestRuntimeOnly.extendsFrom runtimeOnly

  integrationTestImplementation.extendsFrom testImplementation
  integrationTestRuntimeOnly.extendsFrom runtimeOnly

  smokeTestImplementation.extendsFrom testImplementation
  smokeTestRuntimeOnly.extendsFrom runtimeOnly
}

tasks.withType(JavaCompile) {
  options.compilerArgs << "-Xlint:unchecked" << "-Werror"
}

// https://github.com/gradle/gradle/issues/16791
tasks.withType(JavaExec).configureEach {
  javaLauncher.set(javaToolchains.launcherFor(java.toolchain))
}

tasks.withType(Test) {
  useJUnitPlatform()

  testLogging {
    exceptionFormat = 'full'
  }
}

test {
  failFast = true
}

task functional(type: Test) {
  description = "Runs functional tests"
  group = "verification"
  dependsOn assemble, testClasses
  testClassesDirs = sourceSets.functionalTest.output.classesDirs
  classpath = configurations.functionalTestRuntimeClasspath + sourceSets.functionalTest.output

  useJUnitPlatform {
    includeTags System.getProperty("tags", "Functional")
  }

  doFirst {
    delete "${rootDir}/target/site/serenity"
    delete "${rootDir}/report-for-functional-tests"
    logger.quiet("Functional test results directory cleaned before running functional tests")
  }

  finalizedBy {
    aggregate {
      doLast {
        new File("${rootDir}/report-for-functional-tests").mkdirs()
        file("${rootDir}/target/site/serenity").renameTo(file("${rootDir}/report-for-functional-tests"))
        logger.quiet("Functional test report moved to ---> file://${rootDir}/report-for-functional-tests/index.html")
      }
    }
  }
  testLogging {
    events "PASSED", "SKIPPED", "FAILED"
  }
}
functional.finalizedBy(aggregate)

serenity {
  reports = ["single-page-html"]
}

task integration(type: Test) {
  description = "Runs integration tests"
  group = "Verification"
  testClassesDirs = sourceSets.integrationTest.output.classesDirs
  classpath = sourceSets.integrationTest.runtimeClasspath
  failFast = true
}

task smoke(type: Test) {
  description = "Runs Smoke Tests"
  testClassesDirs = sourceSets.smokeTest.output.classesDirs
  classpath = sourceSets.smokeTest.runtimeClasspath
}

jacocoTestReport {
  executionData(test, integration)
  reports {
    xml.required = true
    csv.required = false
    html.required = true
  }
}

project.tasks['sonarqube'].dependsOn jacocoTestReport
project.tasks['check'].dependsOn integration

sonarqube {
  properties {
    property "sonar.projectName", "Reform :: enforcement-api"
    property "sonar.projectKey", "uk.gov.hmcts.reform:enforcement-api"
    property "sonar.coverage.exclusions", "**/config/**/*Configuration.java," +
      "**/*Constants.java," +
      "**/model/*.java," + "**/uk/gov/hmcts/reform/enforcement/Application.java"
  }
}

// before committing a change, make sure task still works
dependencyUpdates {
  def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { qualifier -> version.toUpperCase().contains(qualifier) }
    def regex = /^[0-9,.v-]+$/
    return !stableKeyword && !(version ==~ regex)
  }
  rejectVersionIf { selection -> // <---- notice how the closure argument is named
    return isNonStable(selection.candidate.version) && !isNonStable(selection.currentVersion)
  }
}

// https://jeremylong.github.io/DependencyCheck/dependency-check-gradle/configuration.html
dependencyCheck {
  suppressionFile = 'config/owasp/suppressions.xml'
}

repositories {
  mavenLocal()
  mavenCentral()
  maven { url = 'https://jitpack.io' }
}

ext {
  springBootVersion = '3.2.4'
  springDocVersion = '2.8.6'
  notifyClientVersion = '5.2.1-RELEASE'
  hmctsLoggingVersion = '6.1.8'
  serviceAuthVersion = '5.3.0'
  log4JVersion = '2.24.3'
  logbackVersion = '1.5.18'
  lombokVersion = '1.18.36'
  postgresVersion = '42.7.4'
  serenityVersion = '4.2.17'
  swaggerAnnotationsVersion = '2.2.30'
  junitPlatformVersion = '1.12.1'
  springSecurityTestVersion = '6.4.4'
}

ext['snakeyaml.version'] = '2.2'

dependencies {
  // Spring Boot Starters
  implementation "org.springframework.boot:spring-boot-starter-web"
  implementation "org.springframework.boot:spring-boot-starter-actuator"
  implementation "org.springframework.boot:spring-boot-starter-aop"
  implementation "org.springframework.boot:spring-boot-starter-json"
  implementation "org.springframework.boot:spring-boot-starter-jdbc"
  implementation "org.springframework.boot:spring-boot-starter-security"

  // SpringDoc OpenAPI
  implementation "org.springdoc:springdoc-openapi-starter-webmvc-ui:$springDocVersion"

  // External Services
  implementation "uk.gov.service.notify:notifications-java-client:$notifyClientVersion"
  implementation "com.github.hmcts.java-logging:logging:$hmctsLoggingVersion"
  implementation "com.github.hmcts:service-auth-provider-java-client:$serviceAuthVersion"

  // Logging
  implementation "org.apache.logging.log4j:log4j-api:$log4JVersion"
  implementation "org.apache.logging.log4j:log4j-to-slf4j:$log4JVersion"
  implementation "ch.qos.logback:logback-classic:$logbackVersion"
  implementation "ch.qos.logback:logback-core:$logbackVersion"

  // Database
  implementation "org.postgresql:postgresql:$postgresVersion"

  // Lombok
  implementation "org.projectlombok:lombok:$lombokVersion"
  annotationProcessor "org.projectlombok:lombok:$lombokVersion"

  // API Testing
  implementation "io.rest-assured:rest-assured"

  // Serenity
  implementation "net.serenity-bdd:serenity-rest-assured:$serenityVersion"
  implementation "net.serenity-bdd:serenity-core:$serenityVersion"
  testImplementation "net.serenity-bdd:serenity-junit5:$serenityVersion"

  // Swagger
  implementation "io.swagger.core.v3:swagger-annotations:$swaggerAnnotationsVersion"

  // Testing
  testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine"
  testImplementation("org.springframework.boot:spring-boot-starter-test") {
    exclude group: 'junit', module: 'junit'
    exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
  }
  testImplementation "org.springframework.security:spring-security-test:$springSecurityTestVersion"
  testImplementation "org.junit.platform:junit-platform-suite-api:$junitPlatformVersion"
}

application {
  mainClassName = 'uk.gov.hmcts.reform.enforcement.Application'
}

bootJar {
  archiveFileName = "enforcement-api.jar"

  manifest {
    attributes('Implementation-Version': project.version.toString())
  }
}

// Gradle 7.x issue, workaround from: https://github.com/gradle/gradle/issues/17236#issuecomment-894768083
rootProject.tasks.named("processSmokeTestResources") {
  duplicatesStrategy = 'include'
}

wrapper {
  distributionType = Wrapper.DistributionType.ALL
}
