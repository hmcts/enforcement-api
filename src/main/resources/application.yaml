server:
  port: 4550
  shutdown: "graceful"

# If you use a database then uncomment the `group:, readiness: and include: "db"` lines in the health probes and uncomment the datasource section
management:
  endpoint:
    health:
      show-details: "always"
      # group:
      #  readiness:
      #   include: "db"
  endpoints:
    web:
      base-path: /
      exposure:
        include: health, info, prometheus

springdoc:
  packagesToScan:
    - uk.gov.hmcts.reform.enforcement
  writer-with-order-by-keys: true

security:
  anonymousPaths:
    - "/health"
    - "/health/liveness"
    - "/health/readiness"
    - "/swagger-ui.html"
    - "/swagger-ui/**"
    - "/v3/api-docs/**"

spring:
  config:
    import: "optional:configtree:/mnt/secrets/enforcement/"
  application:
    name: Enforcement API
  datasource:
    driver-class-name: org.postgresql.Driver
    url: jdbc:postgresql://${ENFORCEMENT_DB_HOST:localhost}:${DB_PORT:5432}/${ENFORCEMENT_DB_NAME:enforcement}${ENFORCEMENT_DB_OPTIONS:}
    username: ${ENFORCEMENT_DB_USER_NAME}
    password: ${ENFORCEMENT_DB_PASSWORD}
    properties:
      charSet: UTF-8
    hikari:
      minimumIdle: 2
      maximumPoolSize: 10
      idleTimeout: 10000
      poolName: EnforcementHikariCP
      maxLifetime: 7200000
      connectionTimeout: 30000
  jpa:
    properties:
      hibernate:
        jdbc:
          lob:
            # silence the 'wall-of-text' - unnecessary exception throw about blob types
            non_contextual_creation: true

idam:
  s2s-auth:
    url: ${IDAM_S2S_AUTH_URL:http://localhost:4502}
    totp_secret: ${ENFORCEMENT_API_S2S_SECRET:AAAAAAAAAAAAAAAA}
    microservice: ${S2S_SERVICE_NAME:enforcement_api}
  s2s-authorised:
    services: ${S2S_NAMES_WHITELIST:enforcement_api,pcs_api,pcs_frontend}

notify:
  api-key: ${ENFORCEMENT_NOTIFY_API_KEY:AAAAAAAA-AAAA-AAAA-AAAA-AAAAAAAAAAAA}

azure:
  application-insights:
    instrumentation-key: ${enforcement.AppInsightsInstrumentationKey:00000000-0000-0000-0000-000000000000}

testing-support:
  enabled: false
