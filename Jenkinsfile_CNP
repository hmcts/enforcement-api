#!groovy

@Library("Infrastructure")

import uk.gov.hmcts.contino.AppPipelineDsl
import uk.gov.hmcts.contino.GradleBuilder

def type = "java"
def product = "enforcement"
def component = "api"

def secrets = [
  'enforcement-${env}': [
    secret('enforcement-api-s2s-secret', 'ENFORCEMENT_API_S2S_SECRET')
  ]
]

static LinkedHashMap<String, Object> secret(String secretName, String envVar) {
  [$class     : 'AzureKeyVaultSecret',
   secretType : 'Secret',
   name       : secretName,
   version    : '',
   envVariable: envVar
  ]
}


GradleBuilder builder = new GradleBuilder(this, product)

withPipeline(type, product, component) {
  env.IDAM_S2S_AUTH_URL = "http://rpe-service-auth-provider-aat.service.core-compute-aat.internal"
  loadVaultSecrets(secrets)
  enableDbMigration(product)

  onPR() {
    // Skipping PACT publish on PRs until contracts are verified and CONSUMER_DEPLOY_CHECK can be added
    //enablePactAs([AppPipelineDsl.PactRoles.CONSUMER])
    setPreviewEnvVars()
//    afterSuccess('smoketest:preview') {
//      runE2eTests(env.ENVIRONMENT)
//    }
  }

  onMaster() {
    enablePactAs([AppPipelineDsl.PactRoles.CONSUMER])
    setAatEnvVars()
    afterSuccess('smoketest:aat') {
      runE2eTests(env.ENVIRONMENT)
    }
  }

  onDemo {
    setDemoEnvVars()
  }

  env.IDAM_S2S_AUTH_URL = "http://rpe-service-auth-provider-aat.service.core-compute-aat.internal"
  loadVaultSecrets(secrets)

  afterAlways('functionalTest:preview') {
    archiveFunctionalTestReports()
  }

  onDemo {
    setDemoEnvVars()
  }

  onIthc {
    setIthcEnvVars()
  }

  onPerftest {
    setPerftestEnvVars()
  }

  afterAlways('build') {
    generateDefinitions(builder)
  }

  afterAlways('functionalTest:aat') {
    archiveFunctionalTestReports()
  }
}

def setPreviewEnvVars() {
  // TODO: Update URL to include XUI when available
  env.TEST_E2E_URL_WEB = "https://enforcement-api-pr-${CHANGE_ID}.preview.platform.hmcts.net"
  env.ENVIRONMENT= "preview"
}

def setAatEnvVars() {
  env.ENVIRONMENT= "aat"
}

def archiveFunctionalTestReports() {
  publishHTML([
    allowMissing         : true,
    alwaysLinkToLastBuild: true,
    keepAll              : true,
    reportDir            : "report-for-functional-tests",
    reportFiles          : 'index.html',
    reportName           : 'API Functional Test Report'
  ])

  archiveArtifacts allowEmptyArchive: true, artifacts: '**/report-for-functional-tests/*'
}

def setDemoEnvVars() {
  env.ENVIRONMENT= "demo"
}

def setIthcEnvVars() {
  env.ENVIRONMENT= "ithc"
}

def setPerftestEnvVars() {
  env.ENVIRONMENT= "perftest"
}

def generateDefinitions(builder) {
  builder.gradle('generateCCDConfig')
  sh "./bin/create-xlsx.sh ${env.ENVIRONMENT}"
  steps.archiveArtifacts artifacts: "build/definitions/*.xlsx"
}
