#!groovy

@Library("Infrastructure")

import uk.gov.hmcts.contino.AppPipelineDsl
import uk.gov.hmcts.contino.GradleBuilder
import uk.gov.hmcts.contino.GithubAPI

def type = "java"
def product = "enforcement"
def component = "api"

def secrets = [
  'enforcement-${env}': [
    secret('enforcement-api-s2s-secret', 'ENFORCEMENT_API_S2S_SECRET')
  ]
]

static LinkedHashMap<String, Object> secret(String secretName, String envVar) {
  [$class     : 'AzureKeyVaultSecret',
   secretType : 'Secret',
   name       : secretName,
   version    : '',
   envVariable: envVar
  ]
}
GradleBuilder builder = new GradleBuilder(this, product)

withPipeline(type, product, component) {
  def githubApi = new GithubAPI(this)
  onPR() {
    println("Inside on PR ")
    println(env)
    println("After env printing ")
    // Skipping PACT publish on PRs until contracts are verified and CONSUMER_DEPLOY_CHECK can be added
    // enablePactAs([AppPipelineDsl.PactRoles.CONSUMER])
    setPreviewEnvVars()
    println("**** The ENVIRONMENT values is ****** "+ env.ENVIRONMENT)
    if (githubApi.getLabelsbyPattern(env.BRANCH_NAME, "pr-values:ccd").size() > 0) {
      println("**** Inside If clause ****** ")
      enableHighLevelDataSetup(builder)
      println("**** After calling enableHighLevelDataSetup  ****** Environment is "+ env.ENVIRONMENT)
//      generateDefinitions(builder)
    }
//    afterSuccess('smoketest:preview') {
//      runE2eTests(env.ENVIRONMENT)
//    }
  }

  onMaster() {
    enablePactAs([AppPipelineDsl.PactRoles.CONSUMER])
  }

  env.IDAM_S2S_AUTH_URL = "http://rpe-service-auth-provider-aat.service.core-compute-aat.internal"
  loadVaultSecrets(secrets)

  afterAlways('functionalTest:preview') {
    archiveFunctionalTestReports()
  }

  afterAlways('functionalTest:aat') {
    archiveFunctionalTestReports()
  }


  println("Registering before hook for highleveldatasetup")
  before('highleveldatasetup') {
    println("**** Inside enableHighLevelDataSetup Start ****** ")
    onPR{
      env.DEFINITION_STORE_URL_BASE = "https://ccd-definition-store-enforcement-api-pr-${CHANGE_ID}.preview.platform.hmcts.net"
      env.CASE_API_URL = "https://enforcement-api-pr-${CHANGE_ID}.preview.platform.hmcts.net"
    }
    println("**** Inside enableHighLevelDataSetup END ****** ")
    generateDefinitions(builder)
  }
}

def enableHighLevelDataSetup(builder) {
  println("enableHighLevelDataSetup() called")
  generateDefinitions(builder)
}

def setPreviewEnvVars() {
  // TODO: Update URL to include XUI when available
  env.TEST_E2E_URL_WEB = "https://enforcement-api-pr-${CHANGE_ID}.preview.platform.hmcts.net"
  env.ENVIRONMENT= "preview"
}

def archiveFunctionalTestReports() {
  publishHTML([
    allowMissing         : true,
    alwaysLinkToLastBuild: true,
    keepAll              : true,
    reportDir            : "report-for-functional-tests",
    reportFiles          : 'index.html',
    reportName           : 'API Functional Test Report'
  ])

  archiveArtifacts allowEmptyArchive: true, artifacts: '**/report-for-functional-tests/*'
}


def generateDefinitions(builder) {
  node {
    println("1 . **** Inside generateDefinitions **** ${env.ENVIRONMENT}")
    builder.gradle('generateCCDConfig')
    println("2 . **** After gradle command **** ${env.ENVIRONMENT}")
    sh "./bin/create-xlsx.sh ${env.ENVIRONMENT}"
    println("3 . **** After create-xlsx **** ${env.ENVIRONMENT}")
    steps.archiveArtifacts artifacts: "build/definitions/*.xlsx"
  }
}


